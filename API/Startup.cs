using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using API.Extensions;
using Application.Activities;
using Application.Core;
using MediatR;
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.HttpsPolicy;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Microsoft.OpenApi.Models;
using Persistence;


namespace API
{
    public class Startup
    {
        //constructor injection
        //injecting configuration settings from configuration files
        //ex: appsettings.Development.json etc...        
        private readonly IConfiguration _config;
        public Startup(IConfiguration config)
        {
            _config = config;

        }

        //remove below autogenerated code
        //public IConfiguration Configuration { get; }

        // This method gets called by the runtime. 
        //Use this method to add services to the container.

        //Dependency injection container
        // If we want to add something that we want to inject/use in another class => typically add as
        // service in this container
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddControllers();
            
            //Added services moved to ApplicationServiceExtensions.cs
            //just to keep ConfigureServices cleaner
            services.AddApplicationServices(_config);
        }

        // This method gets called by the runtime. 
        //Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
                app.UseSwagger();
                app.UseSwaggerUI(c => c.SwaggerEndpoint("/swagger/v1/swagger.json", "API v1"));
            }

            //If we don't use HTTPS, no need below middleware
            //app.UseHttpsRedirection();


            app.UseRouting();
            
            app.UseCors("CorsPolicy");

            app.UseAuthorization();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllers();
            });
        }
    }
}
